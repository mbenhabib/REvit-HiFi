# coding: utf-8

"""
    Uber API

    Move your app forward with the Uber API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ModelData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, model_name=None, model_path=None, model_offset=None):
        """
        ModelData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'model_name': 'str',
            'model_path': 'str',
            'model_offset': 'Vector3'
        }

        self.attribute_map = {
            'model_name': 'modelName',
            'model_path': 'modelPath',
            'model_offset': 'modelOffset'
        }

        self._model_name = model_name
        self._model_path = model_path
        self._model_offset = model_offset


    @property
    def model_name(self):
        """
        Gets the model_name of this ModelData.
        Name of model.

        :return: The model_name of this ModelData.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """
        Sets the model_name of this ModelData.
        Name of model.

        :param model_name: The model_name of this ModelData.
        :type: str
        """

        self._model_name = model_name

    @property
    def model_path(self):
        """
        Gets the model_path of this ModelData.
        Location of model

        :return: The model_path of this ModelData.
        :rtype: str
        """
        return self._model_path

    @model_path.setter
    def model_path(self, model_path):
        """
        Sets the model_path of this ModelData.
        Location of model

        :param model_path: The model_path of this ModelData.
        :type: str
        """

        self._model_path = model_path

    @property
    def model_offset(self):
        """
        Gets the model_offset of this ModelData.


        :return: The model_offset of this ModelData.
        :rtype: Vector3
        """
        return self._model_offset

    @model_offset.setter
    def model_offset(self, model_offset):
        """
        Sets the model_offset of this ModelData.


        :param model_offset: The model_offset of this ModelData.
        :type: Vector3
        """

        self._model_offset = model_offset

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
